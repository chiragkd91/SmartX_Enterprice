// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// User Authentication & Authorization
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("EMPLOYEE")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employee     Employee?
  sessions     Session[]
  permissions  Permission[]
  auditLogs    AuditLog[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  module      String
  createdAt   DateTime @default(now())

  // Relations
  users User[]

  @@map("permissions")
}

// Employee Management
model Employee {
  id            String   @id @default(cuid())
  employeeId    String   @unique
  firstName     String
  lastName      String
  email         String   @unique
  phone         String?
  dateOfBirth   DateTime?
  gender        String?
  address       String?  // JSON as string for SQL Server
  emergencyContacts String? // JSON as string for SQL Server
  department    String
  position      String
  hireDate      DateTime
  managerId     String?
  salary        Float
  status        String   @default("ACTIVE")
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user              User?               @relation(fields: [id], references: [id], onDelete: Cascade)
  manager           Employee?           @relation("EmployeeManager", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates      Employee[]          @relation("EmployeeManager")
  attendance        Attendance[]
  leaves            Leave[]
  payroll           Payroll[]
  performance       Performance[]
  training          EmployeeTraining[]
  documents         EmployeeDocument[]
  benefits          EmployeeBenefit[]
  onboarding        Onboarding?
  offboarding       Offboarding?

  @@map("employees")
}

// Attendance Management
model Attendance {
  id          String   @id @default(cuid())
  employeeId  String
  date        DateTime
  checkIn     DateTime?
  checkOut    DateTime?
  totalHours  Float?
  status      String   @default("PRESENT")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([employeeId, date])
  @@map("attendance")
}

// Leave Management
model Leave {
  id          String   @id @default(cuid())
  employeeId  String
  type        String
  startDate   DateTime
  endDate     DateTime
  days        Int
  reason      String
  status      String   @default("PENDING")
  approvedBy  String?
  approvedAt  DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("leaves")
}

// Payroll Management
model Payroll {
  id            String   @id @default(cuid())
  employeeId    String
  month         Int
  year          Int
  basicSalary   Float
  allowances    Float  @default(0)
  deductions    Float  @default(0)
  netSalary     Float
  status        String   @default("PENDING")
  paidAt        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([employeeId, month, year])
  @@map("payroll")
}

// Performance Management
model Performance {
  id          String   @id @default(cuid())
  employeeId  String
  period      String   // e.g., "Q1 2024", "Annual 2024"
  rating      Int      // 1-5 scale
  goals       String?  // JSON as string for SQL Server
  achievements String? // JSON as string for SQL Server
  feedback    String?
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("performance")
}

// Training Management
model TrainingCourse {
  id              String   @id @default(cuid())
  title           String
  description     String
  category        String
  level           String
  duration        Int      // in hours
  instructor      String?
  format          String   // Online, In-Person, Hybrid
  maxEnrollment   Int?
  currentEnrollment Int @default(0)
  status          String   @default("ACTIVE")
  materials       String?  // JSON as string for SQL Server
  prerequisites   String   // JSON array as string for SQL Server
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  enrollments EmployeeTraining[]

  @@map("training_courses")
}

model EmployeeTraining {
  id          String   @id @default(cuid())
  employeeId  String
  courseId    String
  status      String   @default("ENROLLED")
  progress    Int      @default(0) // 0-100
  startDate   DateTime?
  completionDate DateTime?
  certificate String?
  score       Int?
  feedback    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  course   TrainingCourse @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([employeeId, courseId])
  @@map("employee_training")
}

// Document Management
model EmployeeDocument {
  id          String   @id @default(cuid())
  employeeId  String
  title       String
  type        String
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  expiresAt   DateTime?
  isActive    Boolean  @default(true)

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("employee_documents")
}

// Benefits Management
model Benefit {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  cost        Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employeeBenefits EmployeeBenefit[]

  @@map("benefits")
}

model EmployeeBenefit {
  id          String   @id @default(cuid())
  employeeId  String
  benefitId   String
  startDate   DateTime
  endDate     DateTime?
  status      String   @default("ACTIVE")
  cost        Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  benefit  Benefit @relation(fields: [benefitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("employee_benefits")
}

// Onboarding & Offboarding
model Onboarding {
  id          String   @id @default(cuid())
  employeeId  String   @unique
  status      String   @default("IN_PROGRESS")
  startDate   DateTime
  completionDate DateTime?
  checklist   String?  // JSON as string for SQL Server
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("onboarding")
}

model Offboarding {
  id          String   @id @default(cuid())
  employeeId  String   @unique
  status      String   @default("INITIATED")
  startDate   DateTime
  completionDate DateTime?
  reason      String
  checklist   String?  // JSON as string for SQL Server
  exitInterview String? // JSON as string for SQL Server
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("offboarding")
}

// Audit & Security
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  table       String
  recordId    String?
  oldValues   String?  // JSON as string for SQL Server
  newValues   String?  // JSON as string for SQL Server
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("audit_logs")
} 